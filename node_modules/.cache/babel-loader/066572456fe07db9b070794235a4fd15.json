{"ast":null,"code":"var _jsxFileName = \"/home/marcus/Desktop/heyhey/src/components/pages/home/ballShape.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass ballShape extends Component {\n  componentDidMount() {\n    var canvas = document.querySelector('#scene');\n    var width = canvas.offsetWidth,\n        height = canvas.offsetHeight;\n    var renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xA9E7DA);\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 10000);\n    camera.position.set(120, 0, 300);\n    var light = new THREE.HemisphereLight(0xffffff, 0x0C056D, 0.6);\n    scene.add(light);\n    var light = new THREE.DirectionalLight(0x590D82, 0.5);\n    light.position.set(200, 300, 400);\n    scene.add(light);\n    var light2 = light.clone();\n    light2.position.set(-200, 300, 400);\n    scene.add(light2);\n    var geometry = new THREE.IcosahedronGeometry(120, 4);\n\n    for (var i = 0; i < geometry.vertices.length; i++) {\n      var vector = geometry.vertices[i];\n      vector._o = vector.clone();\n    }\n\n    var material = new THREE.MeshPhongMaterial({\n      emissive: 0x23f660,\n      emissiveIntensity: 0.4,\n      shininess: 0\n    });\n    var shape = new THREE.Mesh(geometry, material);\n    scene.add(shape);\n\n    function updateVertices(a) {\n      for (var i = 0; i < geometry.vertices.length; i++) {\n        var vector = geometry.vertices[i];\n        vector.copy(vector._o);\n        var perlin = noise.simplex3(vector.x * 0.006 + a * 0.0002, vector.y * 0.006 + a * 0.0003, vector.z * 0.006);\n        var ratio = perlin * 0.4 + 0.8;\n        vector.multiplyScalar(ratio);\n      }\n\n      geometry.verticesNeedUpdate = true;\n    }\n\n    function render(a) {\n      requestAnimationFrame(render);\n      updateVertices(a);\n      renderer.render(scene, camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/marcus/Desktop/heyhey/src/components/pages/home/ballShape.js"],"names":["React","Component","ReactDOM","THREE","ballShape","componentDidMount","canvas","document","querySelector","width","offsetWidth","height","offsetHeight","renderer","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","setClearColor","scene","Scene","camera","PerspectiveCamera","position","set","light","HemisphereLight","add","DirectionalLight","light2","clone","geometry","IcosahedronGeometry","i","vertices","length","vector","_o","material","MeshPhongMaterial","emissive","emissiveIntensity","shininess","shape","Mesh","updateVertices","a","copy","perlin","noise","simplex3","x","y","z","ratio","multiplyScalar","verticesNeedUpdate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nclass ballShape extends Component {\n  componentDidMount() {\n        var canvas = document.querySelector('#scene');\n        var width = canvas.offsetWidth,\n            height = canvas.offsetHeight;\n\n        var renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true\n        });\n\n        renderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\n        renderer.setSize(width, height);\n        renderer.setClearColor(0xA9E7DA);\n\n        var scene = new THREE.Scene();\n\n        var camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 10000);\n        camera.position.set(120, 0, 300);\n\n        var light = new THREE.HemisphereLight(0xffffff, 0x0C056D, 0.6);\n        scene.add(light);\n\n        var light = new THREE.DirectionalLight(0x590D82, 0.5);\n        light.position.set(200, 300, 400); \n        scene.add(light);\n        var light2 = light.clone();\n        light2.position.set(-200, 300, 400); \n        scene.add(light2);\n\n        var geometry = new THREE.IcosahedronGeometry(120, 4);\n        for(var i = 0; i < geometry.vertices.length; i++) {\n            var vector = geometry.vertices[i];\n            vector._o = vector.clone();  \n        }\n        var material = new THREE.MeshPhongMaterial({\n            emissive: 0x23f660, \n            emissiveIntensity: 0.4,\n            shininess: 0\n        });\n        var shape = new THREE.Mesh(geometry, material);\n        scene.add(shape);\n\n        function updateVertices (a) {\n            for(var i = 0; i < geometry.vertices.length; i++) {\n                var vector = geometry.vertices[i];\n                vector.copy(vector._o);\n                var perlin = noise.simplex3(\n                    (vector.x * 0.006) + (a * 0.0002),\n                    (vector.y * 0.006) + (a * 0.0003),\n                    (vector.z * 0.006)\n                );\n                var ratio = ((perlin*0.4) + 0.8);\n                vector.multiplyScalar(ratio);\n            }\n            geometry.verticesNeedUpdate = true;\n        }\n\n        function render(a) {\n            requestAnimationFrame(render);\n            updateVertices(a);\n            renderer.render(scene, camera);\n        }\n    }\n    \n    render() {\n        return (\n            <div />\n        )\n    }\n}    "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar canvas = document.querySelector('#scene');\nvar width = canvas.offsetWidth,\n    height = canvas.offsetHeight;\nvar renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n  antialias: true\n});\nrenderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\nrenderer.setSize(width, height);\nrenderer.setClearColor(0xA9E7DA);\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 10000);\ncamera.position.set(120, 0, 300);\nvar light = new THREE.HemisphereLight(0xffffff, 0x0C056D, 0.6);\nscene.add(light);\nvar light = new THREE.DirectionalLight(0x590D82, 0.5);\nlight.position.set(200, 300, 400);\nscene.add(light);\nvar light2 = light.clone();\nlight2.position.set(-200, 300, 400);\nscene.add(light2);\nvar geometry = new THREE.IcosahedronGeometry(120, 4);\n\nfor (var i = 0; i < geometry.vertices.length; i++) {\n  var vector = geometry.vertices[i];\n  vector._o = vector.clone();\n}\n\nvar material = new THREE.MeshPhongMaterial({\n  emissive: 0x23f660,\n  emissiveIntensity: 0.4,\n  shininess: 0\n});\nvar shape = new THREE.Mesh(geometry, material);\nscene.add(shape);\n\nfunction updateVertices(a) {\n  for (var i = 0; i < geometry.vertices.length; i++) {\n    var vector = geometry.vertices[i];\n    vector.copy(vector._o);\n    var perlin = noise.simplex3(vector.x * 0.006 + a * 0.0002, vector.y * 0.006 + a * 0.0003, vector.z * 0.006);\n    var ratio = perlin * 0.4 * (mouse.y + 0.1) + 0.8;\n    vector.multiplyScalar(ratio);\n  }\n\n  geometry.verticesNeedUpdate = true;\n}\n\nfunction render(a) {\n  requestAnimationFrame(render);\n  updateVertices(a);\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["/home/marcus/Desktop/heyhey/src/components/pages/home/ballShape.js"],"names":["React","canvas","document","querySelector","width","offsetWidth","height","offsetHeight","renderer","THREE","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","setClearColor","scene","Scene","camera","PerspectiveCamera","position","set","light","HemisphereLight","add","DirectionalLight","light2","clone","geometry","IcosahedronGeometry","i","vertices","length","vector","_o","material","MeshPhongMaterial","emissive","emissiveIntensity","shininess","shape","Mesh","updateVertices","a","copy","perlin","noise","simplex3","x","y","z","ratio","mouse","multiplyScalar","verticesNeedUpdate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nvar canvas = document.querySelector('#scene');\nvar width = canvas.offsetWidth,\n    height = canvas.offsetHeight;\n\nvar renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n});\n\nrenderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\nrenderer.setSize(width, height);\nrenderer.setClearColor(0xA9E7DA);\n\nvar scene = new THREE.Scene();\n\nvar camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 10000);\ncamera.position.set(120, 0, 300);\n\nvar light = new THREE.HemisphereLight(0xffffff, 0x0C056D, 0.6);\nscene.add(light);\n\nvar light = new THREE.DirectionalLight(0x590D82, 0.5);\nlight.position.set(200, 300, 400); \nscene.add(light);\nvar light2 = light.clone();\nlight2.position.set(-200, 300, 400); \nscene.add(light2);\n\nvar geometry = new THREE.IcosahedronGeometry(120, 4);\nfor(var i = 0; i < geometry.vertices.length; i++) {\n    var vector = geometry.vertices[i];\n    vector._o = vector.clone();  \n}\nvar material = new THREE.MeshPhongMaterial({\n    emissive: 0x23f660, \n    emissiveIntensity: 0.4,\n    shininess: 0\n});\nvar shape = new THREE.Mesh(geometry, material);\nscene.add(shape);\n\nfunction updateVertices (a) {\n    for(var i = 0; i < geometry.vertices.length; i++) {\n        var vector = geometry.vertices[i];\n        vector.copy(vector._o);\n        var perlin = noise.simplex3(\n            (vector.x * 0.006) + (a * 0.0002),\n            (vector.y * 0.006) + (a * 0.0003),\n            (vector.z * 0.006)\n        );\n        var ratio = ((perlin*0.4 * (mouse.y+0.1)) + 0.8);\n        vector.multiplyScalar(ratio);\n    }\n    geometry.verticesNeedUpdate = true;\n}\n\nfunction render(a) {\n    requestAnimationFrame(render);\n    updateVertices(a);\n    renderer.render(scene, camera);\n}"]},"metadata":{},"sourceType":"module"}